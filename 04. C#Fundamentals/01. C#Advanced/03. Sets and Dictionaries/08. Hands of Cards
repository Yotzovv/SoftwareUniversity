using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace StackAndQueues
{
    class ReverseString
    {
        static void Main(string[] args)
        {
            string input;
            var hands = new Dictionary<string, HashSet<int>>();
            
            while (!(input = Console.ReadLine().Trim()).Equals("JOKER"))
            {
                var tokens = input.Split(':');
                var player = tokens[0];
                var cards = tokens[1].Split(new[] { ',', ' ' }, StringSplitOptions.RemoveEmptyEntries);


                for (int i = 0; i < cards.Length; i++)
                {
                    int powerInt;
                    var power = cards[i].Substring(0, cards[i].Length - 1);
                    var type = cards[i].Last();
                    var isNumber = int.TryParse(power, out powerInt);

                   if(!isNumber)
                    { 
                        switch(power)
                        {
                            case "J":
                                powerInt = 11;
                                break;
                            case "Q":
                                powerInt = 12;
                                break;
                            case "K":
                                powerInt = 13;
                                break;
                            case "A":
                                powerInt = 14;
                                break;
                        }                      
                    }
                   
                    switch (type)
                    {
                        case 'S':
                            powerInt *= 4;
                            break;
                        case 'H':
                            powerInt *= 3;
                            break;
                        case 'D':
                            powerInt *= 2;
                            break;
                        case 'C':
                            powerInt *= 1;
                            break;
                    }
                    
                    if(hands.ContainsKey(player))
                    {
                        hands[player].Add(powerInt);
                    }
                    else
                    {
                        HashSet<int> hash = new HashSet<int>();
                        hash.Add(powerInt);
                        hands.Add(player, hash); 
                    }
                }
            }

            foreach (var item in hands)
            {
                Console.WriteLine($"{item.Key}: {item.Value.Sum()}");
            }
        }
    }
}
